{"/home/travis/build/npmtest/node-npmtest-clamscan/test.js":"/* istanbul instrument in package npmtest_clamscan */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clamscan/lib.npmtest_clamscan.js":"/* istanbul instrument in package npmtest_clamscan */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_clamscan = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_clamscan = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-clamscan/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-clamscan && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_clamscan */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_clamscan\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_clamscan.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_clamscan.rollup.js'] =\n            local.assetsDict['/assets.npmtest_clamscan.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_clamscan.__dirname + '/lib.npmtest_clamscan.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clamscan/node_modules/clamscan/index.js":"/*!\r\n * Node - Clam\r\n * Copyright(c) 2013 Kyle Farris <kyle@chomponllc.com>\r\n * MIT Licensed\r\n */\r\n\r\n// Module dependencies.\r\nvar __ = require('underscore');\r\nvar fs = require('fs');\r\nvar exec = require('child_process').exec;\r\nvar execSync = require('child_process').execSync;\r\nvar execFile = require('child_process').execFile;\r\nvar spawn = require('child_process').spawn;\r\nvar os = require('os');\r\nvar node_path = require('path');\r\n\r\n// ****************************************************************************\r\n// NodeClam class definition\r\n// -----\r\n// @param    Object    options        Key => Value pairs to override default settings\r\n// ****************************************************************************\r\nfunction NodeClam(options) {\r\n    options = options || {};\r\n\r\n    this.default_scanner = 'clamdscan';\r\n\r\n    // Configuration Settings\r\n    this.defaults = Object.freeze({\r\n        remove_infected: false,\r\n        quarantine_infected: false,\r\n        scan_log: null,\r\n        debug_mode: false,\r\n        file_list: null,\r\n        scan_recursively: true,\r\n        clamscan: {\r\n            path: '/usr/bin/clamscan',\r\n            scan_archives: true,\r\n            db: null,\r\n            active: true\r\n        },\r\n        clamdscan: {\r\n            path: '/usr/bin/clamdscan',\r\n            config_file: '/etc/clamd.conf',\r\n            multiscan: true,\r\n            reload_db: false,\r\n            active: true\r\n        },\r\n        preference: this.default_scanner\r\n    });\r\n\r\n    this.settings = __.extend({},this.defaults);\r\n\r\n    // Override defaults with user preferences\r\n    if (options.hasOwnProperty('clamscan') && Object.keys(options.clamscan).length > 0) {\r\n        this.settings.clamscan = __.extend({},this.settings.clamscan, options.clamscan);\r\n        delete options.clamscan;\r\n    }\r\n    if (options.hasOwnProperty('clamdscan') && Object.keys(options.clamdscan).length > 0) {\r\n        this.settings.clamdscan = __.extend({},this.settings.clamdscan, options.clamdscan);\r\n        delete options.clamdscan;\r\n    }\r\n    this.settings = __.extend({},this.settings,options);\r\n\r\n    // Backwards compatibilty section\r\n    if (this.settings.quarantine_path && !__.isEmpty(this.settings.quarantine_path)) {\r\n        this.settings.quarantine_infected = this.settings.quarantine_path;\r\n    }\r\n\r\n    // Determine whether to use clamdscan or clamscan\r\n    this.scanner = this.default_scanner;\r\n    if (typeof this.settings.preference !== 'string' || ['clamscan','clamdscan'].indexOf(this.settings.preference) === -1) {\r\n        throw new Error(\"Invalid virus scanner preference defined!\");\r\n    }\r\n    if (this.settings.preference === 'clamscan' && this.settings.clamscan.active === true) {\r\n        this.scanner = 'clamscan';\r\n    }\r\n\r\n    // Check to make sure preferred scanner exists and actually is a clamscan binary\r\n    if (!this.is_clamav_binary_sync(this.scanner)) {\r\n        // Fall back to other option:\r\n        if (this.scanner == 'clamdscan' && this.settings.clamscan.active === true && this.is_clamav_binary_sync('clamscan')) {\r\n            this.scanner == 'clamscan';\r\n        } else if (this.scanner == 'clamscan' && this.settings.clamdscan.active === true && this.is_clamav_binary_sync('clamdscan')) {\r\n            this.scanner == 'clamdscan';\r\n        } else {\r\n            throw new Error(\"No valid & active virus scanning binaries are active and available!\");\r\n        }\r\n    }\r\n\r\n    // Make sure quarantine infected path exists at specified location\r\n    if (!__.isEmpty(this.settings.quarantine_infected) && !fs.existsSync(this.settings.quarantine_infected)) {\r\n        var err_msg = \"Quarantine infected path (\" + this.settings.quarantine_infected + \") is invalid.\";\r\n        this.settings.quarantine_infected = false;\r\n        throw new Error(err_msg);\r\n\r\n        if (this.settings.debug_mode)\r\n            console.log(\"node-clam: \" + err_msg);\r\n    }\r\n\r\n    // Make sure scan_log exists at specified location\r\n    if (!__.isEmpty(this.settings.scan_log) && !fs.existsSync(this.settings.scan_log)) {\r\n        var err_msg = \"node-clam: Scan Log path (\" + this.settings.scan_log + \") is invalid.\";\r\n        this.settings.scan_log = null;\r\n        if (this.settings.debug_mode)\r\n            console.log(err_msg);\r\n    }\r\n\r\n    // If using clamscan, make sure definition db exists at specified location\r\n    if (this.scanner === 'clamscan') {\r\n        if (!__.isEmpty(this.settings.clamscan.db) && !fs.existsSync(this.settings.clamscan.db)) {\r\n            var err_msg = \"node-clam: Definitions DB path (\" + this.settings.clamscan.db + \") is invalid.\";\r\n            this.settings.clamscan.db = null;\r\n            if(this.settings.debug_mode)\r\n                console.log(err_msg);\r\n        }\r\n    }\r\n\r\n    // Build clam flags\r\n    this.clam_flags = build_clam_flags(this.scanner, this.settings);\r\n}\r\n\r\n// ****************************************************************************\r\n// Checks to see if a particular path contains a clamav binary\r\n// -----\r\n// NOTE: Not currently being used (maybe for future implementations)\r\n// SEE: in_clamav_binary_sync()\r\n// -----\r\n// @param   String      scanner     Scanner (clamscan or clamdscan) to check\r\n// @param   Function    cb          Callback function to call after check\r\n// @return  VOID\r\n// ****************************************************************************\r\nNodeClam.prototype.is_clamav_binary = function(scanner, cb) {\r\n    var path = this.settings[scanner].path || null;\r\n    if (!path) {\r\n        if (this.settings.debug_mode) {\r\n            console.log(\"node-clam: Could not determine path for clamav binary.\");\r\n        }\r\n        return cb(false);\r\n    }\r\n\r\n    var version_cmds = {\r\n        clamdscan: path + ' -c ' + this.settings.clamdscan.config_file + ' --version',\r\n        clamscan: path + ' --version'\r\n    };\r\n\r\n    fs.exists(path, function(exists) {\r\n        if (exists === false) {\r\n            if (this.settings.debug_mode) {\r\n                console.log(\"node-clam: Could not verify the \" + scanner + \" binary.\");\r\n            }\r\n            return cb(false);\r\n        }\r\n\r\n        exec(version_cmds[scanner], function(err, stdout, stderr) {\r\n            if (stdout.toString().match(/ClamAV/) === null) {\r\n                if (this.settings.debug_mode) {\r\n                    console.log(\"node-clam: Could not verify the \" + scanner + \" binary.\");\r\n                }\r\n                return cb(false);\r\n            }\r\n            return cb(true);\r\n        })\r\n    });\r\n}\r\n\r\n// ****************************************************************************\r\n// Checks to see if a particular path contains a clamav binary\r\n// -----\r\n// @param   String  scanner     Scanner (clamscan or clamdscan) to check\r\n// @return  Boolean             TRUE: Is binary; FALSE: Not binary\r\n// ****************************************************************************\r\nNodeClam.prototype.is_clamav_binary_sync = function(scanner) {\r\n    var path = this.settings[scanner].path || null;\r\n    if (!path) {\r\n        if (this.settings.testing_mode) {\r\n            console.log(\"node-clam: Could not determine path for clamav binary.\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    var version_cmds = {\r\n        clamdscan: path + ' -c ' + this.settings.clamdscan.config_file + ' --version',\r\n        clamscan: path + ' --version'\r\n    };\r\n\r\n    /*\r\n     * Saving this line for version 1.0 release--the one that requires Node 0> .12\r\n     * if (!fs.existsSync(path) || execSync(version_cmds[scanner]).toString().match(/ClamAV/) === null) {\r\n     */\r\n    if (!fs.existsSync(path)) {\r\n        if (this.settings.testing_mode) {\r\n            console.log(\"node-clam: Could not verify the \" + scanner + \" binary.\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// ****************************************************************************\r\n// Checks if a particular file is infected.\r\n// -----\r\n// @param    String        file        Path to the file to check\r\n// @param    Function    callback    (optional) What to do after the scan\r\n// ****************************************************************************\r\nNodeClam.prototype.is_infected = function(file, callback) {\r\n    // Verify second param, if supplied, is a function\r\n    if (callback && typeof callback !== 'function') {\r\n        throw new Error(\"Invalid callback provided. Second paramter, if provided, must be a function!\");\r\n    }\r\n\r\n    // Verify string is passed to the file parameter\r\n    if (typeof file !== 'string' || file.trim() === '') {\r\n        var err = new Error(\"Invalid or empty file name provided.\");\r\n        if (callback && typeof callback === 'function') {\r\n            return callback(err, '', null);\r\n        } else {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    var self = this;\r\n\r\n    if(this.settings.debug_mode) {\r\n        console.log(\"node-clam: Scanning \" + file);\r\n        console.log('node-clam: Configured clam command: ' + this.settings[this.scanner].path + ' ' + this.build_clam_args(file).join(' '));\r\n    }\r\n\r\n    // Execute the clam binary with the proper flags\r\n    execFile(this.settings[this.scanner].path, this.build_clam_args(file), function(err, stdout, stderr) {\r\n        if (err || stderr) {\r\n            if (err) {\r\n                if(err.hasOwnProperty('code') && err.code === 1) {\r\n                    callback(null, file, true);\r\n                } else {\r\n                    if(self.settings.debug_mode)\r\n                        console.log(\"node-clam: \" + err);\r\n                    callback(new Error(err), file, null);\r\n                }\r\n            } else {\r\n                console.error(\"node-clam: \" + stderr);\r\n                callback(err, file, null);\r\n            }\r\n        } else {\r\n            var result = stdout.trim();\r\n\r\n            if(self.settings.debug_mode) {\r\n                console.log('node-clam: file size: ' + fs.statSync(file).size);\r\n                console.log('node-clam: ' + result);\r\n            }\r\n\r\n            if(result.match(/OK$/)) {\r\n                if(self.settings.debug_mode)\r\n                    console.log(\"node-clam: \" + file + ' is OK!');\r\n                callback(null, file, false);\r\n            } else {\r\n                if(self.settings.debug_mode)\r\n                    console.log(\"node-clam: \" + file + ' is INFECTED!');\r\n                callback(null, file, true);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// ****************************************************************************\r\n// Scans an array of files or paths. You must provide the full paths of the\r\n// files and/or paths.\r\n// -----\r\n// @param    Array        files        A list of files or paths (full paths) to be scanned.\r\n// @param    Function    end_cb        What to do after the scan\r\n// @param    Function    file_cb        What to do after each file has been scanned\r\n// ****************************************************************************\r\nNodeClam.prototype.scan_files = function(files, end_cb, file_cb) {\r\n    files = files || [];\r\n    end_cb = end_cb || null;\r\n    file_cb = file_cb || null;\r\n\r\n    var bad_files = [];\r\n    var good_files = [];\r\n    var completed_files = 0;\r\n    var self = this;\r\n    var file, file_list;\r\n\r\n    // Verify second param, if supplied, is a function\r\n    if (end_cb && typeof end_cb !== 'function') {\r\n        throw new Error(\"Invalid end-scan callback provided. Second paramter, if provided, must be a function!\");\r\n    }\r\n\r\n    // Verify second param, if supplied, is a function\r\n    if (file_cb && typeof file_cb !== 'function') {\r\n        throw new Error(\"Invalid per-file callback provided. Third paramter, if provided, must be a function!\");\r\n    }\r\n\r\n    // The function that parses the stdout from clamscan/clamdscan\r\n    var parse_stdout = function(err, stdout) {\r\n        stdout.trim()\r\n            .split(String.fromCharCode(10))\r\n            .forEach(function(result){\r\n                if (result.match(/^[\\-]+$/) !== null) return;\r\n\r\n                //console.log(\"PATH: \" + result)\r\n                var path = result.match(/^(.*): /);\r\n                if (path && path.length > 0) {\r\n                    path = path[1];\r\n                } else {\r\n                    path = '<Unknown File Path!>';\r\n                }\r\n\r\n                if (result.match(/OK$/)) {\r\n                    if (self.settings.debug_mode === true){\r\n                        console.log(path + ' is OK!');\r\n                    }\r\n                    good_files.push(path);\r\n                } else {\r\n                    if (self.settings.debug_mode === true){\r\n                        console.log(path + ' is INFECTED!');\r\n                    }\r\n                    bad_files.push(path);\r\n                }\r\n            });\r\n\r\n        if (err)\r\n            return end_cb(err, [], bad_files);\r\n        return end_cb(null, good_files, bad_files);\r\n    };\r\n\r\n    // The function that actually scans the files\r\n    var do_scan = function(files) {\r\n        var num_files = files.length;\r\n\r\n        if (self.settings.debug_mode === true) {\r\n            console.log(\"node-clam: Scanning a list of \" + num_files + \" passed files.\");\r\n        }\r\n\r\n        // Slower but more verbose way...\r\n        if (typeof file_cb === 'function') {\r\n            (function scan_file() {\r\n                file = files.shift();\r\n                self.is_infected(file, function(err, file, infected) {\r\n                    completed_files++;\r\n\r\n                    if (self.settings.debug_mode)\r\n                        console.log(\"node-clam: \" + completed_files + \"/\" + num_files + \" have been scanned!\");\r\n\r\n                    if(!infected) {\r\n                        good_files.push(file);\r\n                    } else if(infected || err) {\r\n                        bad_files.push(file);\r\n                    }\r\n\r\n                    if(__.isFunction(file_cb)) file_cb(err, file, infected);\r\n\r\n                    if(completed_files >= num_files) {\r\n                        if(self.settings.debug_mode) {\r\n                            console.log('node-clam: Scan Complete!');\r\n                            console.log(\"node-clam: Bad Files: \");\r\n                            console.dir(bad_files);\r\n                            console.log(\"node-clam: Good Files: \");\r\n                            console.dir(good_files);\r\n                        }\r\n                        if(__.isFunction(end_cb)) end_cb(null, good_files, bad_files);\r\n                    }\r\n                    // All files have not been scanned yet, scan next item.\r\n                    else {\r\n                        // Using setTimeout to avoid crazy stack trace madness.\r\n                        setTimeout(scan_file, 0);\r\n                    }\r\n                });\r\n            })();\r\n        }\r\n\r\n        // The MUCH quicker but less-verbose way\r\n        else {\r\n            var all_files = [];\r\n\r\n            var finish_scan = function() {\r\n                // Make sure there are no dupes and no falsy values... just cause we can\r\n                all_files = __.uniq(__.compact(all_files));\r\n\r\n                // If file list is empty, return error\r\n                if (all_files.length <= 0)\r\n                    return end_cb(new Error(\"No valid files provided to scan!\"), [], []);\r\n\r\n                // List files by space and escape\r\n                var items = files.map(function(file) {\r\n                    return file.replace(/ /g,'\\\\ ');\r\n                });\r\n\r\n                // Build the actual command to run\r\n                if(self.settings.debug_mode === true)\r\n                    console.log('node-clam: Configured clam command: ' + self.settings[self.scanner].path + ' ' +self.build_clam_args(items).join(' '));\r\n\r\n                // Execute the clam binary with the proper flags\r\n                execFile(self.settings[self.scanner].path, self.build_clam_args(items), function(err, stdout, stderr) {\r\n                    if(self.settings.debug_mode === true) {\r\n                        console.log('node-clam: stdout:', stdout);\r\n                    }\r\n                    if (err && stderr) {\r\n                        if(self.settings.debug_mode === true){\r\n                            console.log('node-clam: An error occurred.');\r\n                            console.error(err);\r\n                            console.log('node-clam: ' + stderr);\r\n                        }\r\n\r\n                        if (stderr.length > 0) {\r\n                            bad_files = stderr.split(os.EOL).map(function(err_line) {\r\n                                var match = err_line.match(/^ERROR: Can't access file (.*)+$/); //'// fix for some bad syntax highlighters\r\n                                if (match !== null && match.length > 1 && typeof match[1] === 'string') {\r\n                                    return match[1];\r\n                                }\r\n                                return '';\r\n                            });\r\n\r\n                            bad_files = __.compact(bad_files);\r\n                        }\r\n                    }\r\n\r\n                    return parse_stdout(err, stdout);\r\n                });\r\n            };\r\n\r\n            if (self.scanner === 'clamdscan' && self.scan_recursively === false) {\r\n                (function get_dir_files() {\r\n                    if (files.length > 0) {\r\n                        var file = files.pop();\r\n                        fs.stat(file, function(err, file) {\r\n                            if (!file.isFile()) {\r\n                                fs.readdir(file, function(err, dir_file) {\r\n                                    all_files = __.uniq(all_files.concat(dir_file));\r\n                                });\r\n                            } else {\r\n                                all_files.push(file);\r\n                            }\r\n                            get_dir_files();\r\n                        });\r\n                    } else {\r\n                        finish_scan();\r\n                    }\r\n                })();\r\n            } else {\r\n                all_files = files;\r\n                finish_scan();\r\n            }\r\n        }\r\n    };\r\n\r\n    // If string is provided in files param, forgive them... create an array\r\n    if (typeof files === 'string' && files.trim().length > 0) {\r\n        files = files.trim().split(',').map(function(v) { return v.trim(); });\r\n    }\r\n\r\n    // Do some parameter validation\r\n    if (!__.isArray(files) || files.length <= 0) {\r\n        if (__.isEmpty(this.settings.file_list)) {\r\n            var err = new Error(\"No files provided to scan and no file list provided!\");\r\n            return end_cb(err, [], []);\r\n        }\r\n\r\n        fs.exists(this.settings.file_list, function(exists) {\r\n            if (exists === false) {\r\n                var err = new Error(\"No files provided and file list provided (\"+this.settings.file_list+\") could not be found!\");\r\n                return end_cb(err, [], []);\r\n            }\r\n\r\n            fs.readFile(self.settings.file_list, function(err, data) {\r\n                if (err) {\r\n                    return end_cb(err, [], []);\r\n                }\r\n                data = data.toString().split(os.EOL);\r\n                return do_scan(data);\r\n            });\r\n        });\r\n    } else {\r\n        return do_scan(files);\r\n    }\r\n}\r\n\r\n// ****************************************************************************\r\n// Scans an entire directory. Provides 3 params to end callback: Error, path\r\n// scanned, and whether its infected or not. To scan multiple directories, pass\r\n// them as an array to the scan_files method.\r\n// -----\r\n// NOTE: While possible, it is NOT advisable to use the file_cb parameter when\r\n// using the clamscan binary. Doing so with clamdscan is okay, however. This\r\n// method also allows for non-recursive scanning with the clamdscan binary.\r\n// -----\r\n// @param    String        path        The directory to scan files of\r\n// @param    Function    end_cb        What to do when all files have been scanned\r\n// @param   Function    file_cb     What to do after each file has been scanned\r\n// ****************************************************************************\r\nNodeClam.prototype.scan_dir = function(path, end_cb, file_cb) {\r\n    var self = this;\r\n\r\n    path = path || '';\r\n    end_cb = end_cb || null;\r\n    file_cb = file_cb || null;\r\n\r\n    // Verify path provided is a string\r\n    if (typeof path !== 'string' || path.length <= 0) {\r\n        return end_cb(new Error(\"Invalid path provided! Path must be a string!\"));\r\n    }\r\n\r\n    // Verify second param, if supplied, is a function\r\n    if (end_cb && typeof end_cb !== 'function') {\r\n        return end_cb(new Error(\"Invalid end-scan callback provided. Second paramter, if provided, must be a function!\"));\r\n    }\r\n\r\n    // Trim trailing slash\r\n    path = path.replace(/\\/$/, '');\r\n\r\n    if(this.settings.debug_mode)\r\n        console.log(\"node-clam: Scanning Directory: \" + path);\r\n\r\n    // Get all files recursively\r\n    if (this.settings.scan_recursively && typeof file_cb === 'function') {\r\n        execFile('find', [path], function(err, stdout, stderr) {\r\n            if (err || stderr) {\r\n                if(this.settings.debug_mode === true)\r\n                    console.error(stderr);\r\n                return end_cb(err, path, null);\r\n            } else {\r\n                var files = stdout.split(\"\\n\").map(function(path) { return path.replace(/ /g,'\\\\ '); });\r\n                self.scan_files(files, end_cb, file_cb);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Clamdscan always does recursive, so, here's a way to avoid that if you want...\r\n    else if (this.settings.scan_recursively === false && this.scanner === 'clamdscan') {\r\n        fs.readdir(path, function(err, files) {\r\n            var good_files = [];\r\n            (function get_file_stats() {\r\n                if (files.length > 0) {\r\n                    var file = files.pop();\r\n\t\t\t\t\tfile = node_path.join(path, file);\r\n                    fs.stat(file, function(err, info) {\r\n                    \tif (!err) {\r\n                            if (info.isFile()) {\r\n                                good_files.push(file);\r\n                            }\r\n                        } else {\r\n                            if (self.settings.debug_mode)\r\n                                console.log(\"node-clam: Error scanning file in directory: \", err);\r\n                        }\r\n                        get_file_stats();\r\n\t\t\t\t\t});\r\n                } else {\r\n                    self.scan_files(good_files, end_cb, file_cb);\r\n                }\r\n            })();\r\n        });\r\n    }\r\n\r\n    // If you don't care about individual file progress (which is very slow for clamscan but fine for clamdscan...)\r\n    else if (this.settings.scan_recursively && typeof file_cb !== 'function') {\r\n        if(this.settings.debug_mode === true)\r\n            console.log('node-clam: Configured clam command: ' + this.settings[this.scanner].path + ' ' + this.build_clam_args(path).join(' '));\r\n\r\n        // Execute the clam binary with the proper flags\r\n        execFile(this.settings[this.scanner].path, this.build_clam_args(path), function(err, stdout, stderr) {\r\n            if (err || stderr) {\r\n                if (err) {\r\n                    if(err.hasOwnProperty('code') && err.code === 1) {\r\n                        end_cb(null, [], [path]);\r\n                    } else {\r\n                        if(self.settings.debug_mode)\r\n                            console.log(\"node-clam: \" + err);\r\n                        end_cb(new Error(err), [], [path]);\r\n                    }\r\n                } else {\r\n                    console.error(\"node-clam: \" + stderr);\r\n                    end_cb(err, [], [path]);\r\n                }\r\n            } else {\r\n                var result = stdout.trim();\r\n\r\n                if(result.match(/OK$/)) {\r\n                    if(self.settings.debug_mode)\r\n                        console.log(path + ' is OK!');\r\n                    return end_cb(null, [path], []);\r\n                } else {\r\n                    if(self.settings.debug_mode)\r\n                        console.log(path + ' is INFECTED!');\r\n                    return end_cb(null, [], [path]);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// *****************************************************************************\r\n// Builds out the args to pass to execFile\r\n// -----\r\n// @param    String|Array    item        The file(s) / directory(ies) to append to the args\r\n// @api        Private\r\n// *****************************************************************************\r\nNodeClam.prototype.build_clam_args = function (item) {\r\n    var args = this.clam_flags.slice();\r\n\r\n    if (typeof item === 'string') {\r\n        args.push(item);\r\n    }\r\n\r\n    if ((item instanceof Array) === true) {\r\n        args = args.concat(item);\r\n    }\r\n\r\n    return args;\r\n}\r\n\r\nmodule.exports = function(options) {\r\n    return new NodeClam(options);\r\n};\r\n\r\n// *****************************************************************************\r\n// Builds out the flags based on the configuration the user provided\r\n// -----\r\n// @param    String    scanner        The scanner to use (clamscan or clamdscan)\r\n// @param    Object    settings    The settings used to build the flags\r\n// @return    String                The concatenated clamav flags\r\n// @api        Private\r\n// *****************************************************************************\r\nfunction build_clam_flags(scanner, settings) {\r\n    var flags_array = ['--no-summary'];\r\n\r\n    // Flags specific to clamscan\r\n    if (scanner == 'clamscan') {\r\n        flags_array.push('--stdout');\r\n\r\n        // Remove infected files\r\n        if (settings.remove_infected === true) {\r\n            flags_array.push('--remove=yes');\r\n        } else {\r\n            flags_array.push('--remove=no');\r\n        }\r\n        // Database file\r\n        if (!__.isEmpty(settings.clamscan.db)) flags_array.push('--database=' + settings.clamscan.db);\r\n        // Scan archives\r\n        if (settings.clamscan.scan_archives === true) {\r\n            flags_array.push('--scan-archive=yes');\r\n        } else {\r\n            flags_array.push('--scan-archive=no');\r\n        }\r\n        // Recursive scanning (flag is specific, feature is not)\r\n        if (settings.scan_recursively === true) {\r\n            flags_array.push('-r');\r\n        } else {\r\n            flags_array.push('--recursive=no');\r\n        }\r\n    }\r\n\r\n    // Flags specific to clamdscan\r\n    else if (scanner == 'clamdscan') {\r\n        flags_array.push('--fdpass');\r\n\r\n        // Remove infected files\r\n        if (settings.remove_infected === true) flags_array.push('--remove');\r\n        // Specify a config file\r\n        if (!__.isEmpty(settings.clamdscan.config_file)) flags_array.push('--config-file=' + settings.clamdscan.config_file);\r\n        // Turn on multi-threaded scanning\r\n        if (settings.clamdscan.multiscan === true) flags_array.push('--multiscan');\r\n        // Reload the virus DB\r\n        if (settings.clamdscan.reload_db === true) flags_array.push('--reload');\r\n    }\r\n\r\n    // ***************\r\n    // Common flags\r\n    // ***************\r\n\r\n    // Remove infected files\r\n    if (settings.remove_infected !== true) {\r\n        if (!__.isEmpty(settings.quarantine_infected))\r\n            flags_array.push('--move=' + settings.quarantine_infected);\r\n    }\r\n    // Write info to a log\r\n    if (!__.isEmpty(settings.scan_log)) flags_array.push('--log=' + settings.scan_log);\r\n    // Read list of files to scan from a file\r\n    if (!__.isEmpty(settings.file_list)) flags_array.push('--file-list=' + settings.file_list);\r\n\r\n\r\n    // Build the String\r\n    return flags_array;\r\n}\r\n"}